/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ccjavaserver;

import java.awt.BorderLayout;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.Raster;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Time;
import java.time.LocalTime;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author alist
 */
public class MainServerFrame extends javax.swing.JFrame {
    private static final String introductionMessage = " ----- Crappy Crawler Java Server ----- \n "
                                                    + Time.valueOf(LocalTime.MIN);
    private static final int mPort = 6000;
    private static Socket mSocket;
    private static ServerSocket mServerSocket;
    private static DataInputStream mDataInputStream;
    private static BufferedReader mBuffReader;
    private static InputStreamReader mInputStreamReader; //may be redundant
    private static String mMessage = "";
    
    
    /**
     * Creates new form MainServerFrame
     */
    public MainServerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        VideoFeedPanel = new javax.swing.JPanel();
        ConsoleScrollPane = new javax.swing.JScrollPane();
        ConsoleTextArea = new javax.swing.JTextArea();
        CommandHistoryScrollPane = new javax.swing.JScrollPane();
        CommandHistoryTextArea = new javax.swing.JTextArea();
        ConsoleTextField = new javax.swing.JTextField();
        ConsoleSend = new javax.swing.JButton();
        Title = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        VideoFeedPanel.setBackground(new java.awt.Color(0, 0, 0));
        VideoFeedPanel.setFocusable(false);

        javax.swing.GroupLayout VideoFeedPanelLayout = new javax.swing.GroupLayout(VideoFeedPanel);
        VideoFeedPanel.setLayout(VideoFeedPanelLayout);
        VideoFeedPanelLayout.setHorizontalGroup(
            VideoFeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );
        VideoFeedPanelLayout.setVerticalGroup(
            VideoFeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 176, Short.MAX_VALUE)
        );

        ConsoleTextArea.setColumns(20);
        ConsoleTextArea.setRows(5);
        ConsoleTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ConsoleTextArea.setFocusable(false);
        ConsoleTextArea.setNextFocusableComponent(ConsoleTextField);
        ConsoleScrollPane.setViewportView(ConsoleTextArea);

        CommandHistoryTextArea.setColumns(20);
        CommandHistoryTextArea.setRows(5);
        CommandHistoryTextArea.setFocusable(false);
        CommandHistoryScrollPane.setViewportView(CommandHistoryTextArea);

        ConsoleTextField.setToolTipText("console");
        ConsoleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsoleTextFieldActionPerformed(evt);
            }
        });

        ConsoleSend.setText("Send");

        Title.setText("CrappyCrawler HostServer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(CommandHistoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Title)
                            .addComponent(VideoFeedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ConsoleTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConsoleSend, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ConsoleScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(ConsoleScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConsoleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConsoleSend))
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VideoFeedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CommandHistoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConsoleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsoleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConsoleTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //ConsoleTextArea.setText("");

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainServerFrame().setVisible(true);
            }
        });
        
        
        try
        {
            mServerSocket = new ServerSocket(mPort);
            InetAddress hostIp = InetAddress.getLocalHost();
            mMessage = "Host socket waiting for connection at " + hostIp.toString() + ":"+ mPort;
            System.out.println(mMessage);
            //consoleWrite(mMessage);
            while(true){
            mSocket = mServerSocket.accept();
            if (mSocket.isConnected())
                System.out.println("Client has connected");
            //    consoleWrite("Client has connected to server.");
            mInputStreamReader = new InputStreamReader(mSocket.getInputStream());
            mBuffReader = new BufferedReader(mInputStreamReader);
            mDataInputStream = new DataInputStream(mSocket.getInputStream());
            previewCameraStream();
            
           }
        } catch(IOException e) {
          e.printStackTrace();
        }
        
    
    }
    
    private static void previewCameraStream() throws IOException {
    //This is to preview the camera stream from the phone when something is 
    //connected    
        int width;
        int height;
        width = mDataInputStream.readInt();
        height = mDataInputStream.readInt();
        System.out.println("after assigning");
        mMessage = "Width = " + width + " Height = " + height;
        System.out.println(mMessage);
        byte data[] = new byte[width*height];
        System.out.println("length = " + width*height);
        for(int i = 0 ; i < width*height; ++i) {
         data[i] = mDataInputStream.readByte();
        }
        if(width ==0 || height == 0)
            return;
        BufferedImage previewImage = createGrayScaleImage(data, width, height);
        ImageIcon image = new ImageIcon(previewImage);
        JLabel label = new JLabel("", image, JLabel.CENTER);
        VideoFeedPanel.add(label,BorderLayout.CENTER);
    }
    
    
    public static BufferedImage createGrayScaleImage(byte[] buffer, int width, int height) {
    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
    int[] nBits = { 8 };
    ColorModel cm = new ComponentColorModel(cs, nBits, false, true,
            Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
    SampleModel sm = cm.createCompatibleSampleModel(width, height);
    DataBufferByte db = new DataBufferByte(buffer, width * height);
    WritableRaster raster = Raster.createWritableRaster(sm, db, null);
    BufferedImage result = new BufferedImage(cm, raster, false, null);

    return result;
}
    
    private static void consoleWrite(String message) {
        //TODO - fix this method, nullpointerException is thrown anytime you try to access ConsoleTextArea
        try{
        if(ConsoleTextArea.getText().isEmpty())
            ConsoleTextArea.setText(ConsoleTextArea.getText() + "\n" + message);
        ConsoleTextArea.setText(ConsoleTextArea.getText() + "\n" + message);
        }catch(NullPointerException e) {
            e.printStackTrace();
            System.out.print("Couldn't write to console");
        }
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane CommandHistoryScrollPane;
    private javax.swing.JTextArea CommandHistoryTextArea;
    private javax.swing.JScrollPane ConsoleScrollPane;
    private javax.swing.JButton ConsoleSend;
    private static javax.swing.JTextArea ConsoleTextArea;
    private javax.swing.JTextField ConsoleTextField;
    private javax.swing.JLabel Title;
    private static javax.swing.JPanel VideoFeedPanel;
    // End of variables declaration//GEN-END:variables
}

