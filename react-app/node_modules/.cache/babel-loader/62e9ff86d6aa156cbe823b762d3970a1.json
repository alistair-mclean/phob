{"ast":null,"code":"var _jsxFileName = \"/home/alistair/practice/react/typescript-test/src/components/organismConfig/OrganismConfigPanel.tsx\";\nimport React from 'react';\nimport OrganismList from './OrganismList';\n\nclass OrganismConfigPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = event => {\n      this.setState({\n        newOrganism: event.target.value\n      });\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.organisms.includes(this.state.newOrganism)) {\n        return;\n      }\n\n      this.setState({\n        selectedOrganism: '',\n        organisms: [...this.state.organisms, this.state.selectedOrganism]\n      });\n    };\n\n    this.state = {\n      organisms: [],\n      selectedOrganism: '',\n      newOrganism: '',\n      organismConfigs: {}\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"This is the config Panel\"), React.createElement(\"form\", {\n      className: \"Todo\",\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Organism name\",\n      value: this.state.selectedOrganism,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Add\")), React.createElement(OrganismList, {\n      organisms: this.state.organisms,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default OrganismConfigPanel;","map":{"version":3,"sources":["/home/alistair/practice/react/typescript-test/src/components/organismConfig/OrganismConfigPanel.tsx"],"names":["React","OrganismList","OrganismConfigPanel","Component","constructor","props","onChange","event","setState","newOrganism","target","value","onSubmit","preventDefault","state","organisms","includes","selectedOrganism","organismConfigs","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAUA,MAAMC,mBAAN,SAAkCF,KAAK,CAACG,SAAxC,CAAgF;AAC5EC,EAAAA,WAAW,CAACC,KAAD,EAAkC;AACzC,UAAMA,KAAN;;AADyC,SAU7CC,QAV6C,GAUjCC,KAAD,IAA4C;AACnD,WAAKC,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAA3B,OAAd;AACH,KAZ4C;;AAAA,SAc7CC,QAd6C,GAcjCL,KAAD,IAA4C;AACnDA,MAAAA,KAAK,CAACM,cAAN;;AAEA,UAAI,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,QAArB,CAA8B,KAAKF,KAAL,CAAWL,WAAzC,CAAJ,EAA0D;AACtD;AACH;;AAED,WAAKD,QAAL,CAAc;AACVS,QAAAA,gBAAgB,EAAE,EADR;AAEVF,QAAAA,SAAS,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,SAAf,EAA0B,KAAKD,KAAL,CAAWG,gBAArC;AAFD,OAAd;AAKH,KA1B4C;;AAEzC,SAAKH,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,EADF;AAETE,MAAAA,gBAAgB,EAAE,EAFT;AAGTR,MAAAA,WAAW,EAAE,EAHJ;AAITS,MAAAA,eAAe,EAAE;AAJR,KAAb;AAMH;;AAoBDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAuB,MAAA,QAAQ,EAAE,KAAKP,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,WAAW,EAAC,eAAnB;AAAmC,MAAA,KAAK,EAAE,KAAKE,KAAL,CAAWG,gBAArD;AAAuE,MAAA,QAAQ,EAAE,KAAKX,QAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,CAFJ,EAMI,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAE,KAAKQ,KAAL,CAAWC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAUH;;AAxC2E;;AA2ChF,eAAeb,mBAAf","sourcesContent":["import React from 'react';\nimport OrganismList from './OrganismList';\n\ntype OrganismConfigPanelProps = {\n    organisms: Array<string>, \n    selectedOrganism: string, \n    newOrganism: string,\n    organismConfigs: {}, \n}\n\n\nclass OrganismConfigPanel extends React.Component<any, OrganismConfigPanelProps>{\n    constructor(props: OrganismConfigPanelProps) {\n        super(props);\n        this.state = {\n            organisms: [],\n            selectedOrganism: '',\n            newOrganism: '',\n            organismConfigs: {},\n        }\n    }\n    \n    onChange = (event: { target: { value: string; }; }) => {\n        this.setState({newOrganism: event.target.value});\n    }\n\n    onSubmit = (event: { preventDefault: () => void; }) => {\n        event.preventDefault()\n        \n        if (this.state.organisms.includes(this.state.newOrganism)){\n            return;\n        }\n        \n        this.setState({\n            selectedOrganism: '',\n            organisms: [...this.state.organisms, this.state.selectedOrganism],\n        });\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>This is the config Panel</h1>\n                <form className=\"Todo\" onSubmit={this.onSubmit}>\n                    <input placeholder=\"Organism name\" value={this.state.selectedOrganism} onChange={this.onChange} />\n                    <button>Add</button>\n                </form>\n                <OrganismList organisms={this.state.organisms}/>\n            </div>\n        )\n    }\n}\n\nexport default OrganismConfigPanel;"]},"metadata":{},"sourceType":"module"}