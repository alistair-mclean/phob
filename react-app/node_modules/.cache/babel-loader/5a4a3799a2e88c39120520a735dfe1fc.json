{"ast":null,"code":"var _jsxFileName = \"/home/alistair/practice/react/typescript-test/src/components/organismConfig/OrganismConfigPanel.tsx\";\nimport React from 'react';\nimport Organism from './Organism'; // import OrganismList from './OrganismList';\n\nclass OrganismConfigPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = event => {\n      this.setState({\n        newOrganism: event.target.value\n      });\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault(); // TODO - Compensate for the edge case of the organism name only being spaces. \n      // const strippedName = this.state.newOrganism;\n      // If the new organism already exists in the list of organisms, don't add it to the list. \n\n      if (this.state.organisms.includes(this.state.newOrganism)) {\n        return;\n      }\n\n      this.setState({\n        selectedOrganism: this.state.newOrganism,\n        organisms: [...this.state.organisms, this.state.newOrganism],\n        newOrganism: ''\n      });\n    };\n\n    this.removeOrganism = organismName => {\n      const organisms = this.state.organisms;\n      const newOrganisms = [];\n      organisms.forEach(organism => {\n        if (organism !== organismName) {\n          newOrganisms.push(organism);\n        }\n      });\n      this.setState({\n        organisms: newOrganisms\n      });\n    };\n\n    this.selectOrganism = organismName => {\n      this.setState({\n        selectedOrganism: organismName\n      });\n      console.log('! ! ! orgConfigPanel.state', this.state);\n    };\n\n    this.state = {\n      organisms: [],\n      selectedOrganism: '',\n      newOrganism: '',\n      organismConfigs: {}\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"This is the config Panel\"), React.createElement(\"form\", {\n      className: \"Todo\",\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Organism name\",\n      value: this.state.newOrganism,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Add\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.organisms.map((organism, index) => React.createElement(Organism, {\n      key: index,\n      organismName: organism,\n      isSelected: false,\n      remove: this.removeOrganism,\n      select: this.selectOrganism,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default OrganismConfigPanel;","map":{"version":3,"sources":["/home/alistair/practice/react/typescript-test/src/components/organismConfig/OrganismConfigPanel.tsx"],"names":["React","Organism","OrganismConfigPanel","Component","constructor","props","onChange","event","setState","newOrganism","target","value","onSubmit","preventDefault","state","organisms","includes","selectedOrganism","removeOrganism","organismName","newOrganisms","forEach","organism","push","selectOrganism","console","log","organismConfigs","render","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Organism from './Organism';\n// import OrganismList from './OrganismList';\n\ntype OrganismConfigPanelProps = {\n    organisms: Array<string>, \n    selectedOrganism: string, \n    newOrganism: string,\n    organismConfigs: {}, \n}\n\n\nclass OrganismConfigPanel extends React.Component<any, OrganismConfigPanelProps>{\n    constructor(props: OrganismConfigPanelProps) {\n        super(props);\n        this.state = {\n            organisms: [],\n            selectedOrganism: '',\n            newOrganism: '',\n            organismConfigs: {},\n        }\n    }\n    \n    onChange = (event: { target: { value: string; }; }) => {\n        this.setState({newOrganism: event.target.value});\n    }\n\n    onSubmit = (event: { preventDefault: () => void; }) => {\n        event.preventDefault()\n        \n        // TODO - Compensate for the edge case of the organism name only being spaces. \n        // const strippedName = this.state.newOrganism;\n\n        // If the new organism already exists in the list of organisms, don't add it to the list. \n        if (this.state.organisms.includes(this.state.newOrganism)){\n            return;\n        }\n        \n        this.setState({\n            selectedOrganism: this.state.newOrganism,\n            organisms: [...this.state.organisms, this.state.newOrganism],\n            newOrganism: '',\n        });\n\n    }\n\n    removeOrganism = (organismName: string) => {\n        const { organisms } = this.state;\n        const newOrganisms : Array<string> = [];\n        organisms.forEach((organism) => {\n            if (organism !== organismName) {\n                newOrganisms.push(organism);\n            }\n        })\n\n        this.setState({\n            organisms: newOrganisms,\n        })\n    }\n\n    selectOrganism = (organismName: string) => {\n        this.setState({\n            selectedOrganism: organismName\n        });\n        console.log('! ! ! orgConfigPanel.state', this.state);\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>This is the config Panel</h1>\n                <form className=\"Todo\" onSubmit={this.onSubmit}>\n                    <input placeholder=\"Organism name\" value={this.state.newOrganism} onChange={this.onChange} />\n                    <button>Add</button>\n                </form>\n                <div>\n                    {\n                        this.state.organisms.map((organism:string, index:number) => (\n                            <Organism key={index} organismName={organism} isSelected={false} remove={this.removeOrganism} select={this.selectOrganism}/>\n                        ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default OrganismConfigPanel;"]},"metadata":{},"sourceType":"module"}