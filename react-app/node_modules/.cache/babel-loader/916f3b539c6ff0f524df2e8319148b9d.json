{"ast":null,"code":"var _jsxFileName = \"/home/alistair/practice/react/typescript-test/src/components/organismConfig/OrganismList.tsx\";\nimport React from 'react';\nimport { FuncOrganism } from './Organism';\n\nclass OrganismList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      organisms: [],\n      selectedOrganism: null\n    };\n  }\n\n  render() {\n    console.log('@@@ @ @ orglist render');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, this.state.organisms.map((organism, index) => // <Organism key={index} organismName={organism} isSelected={false} />\n    FuncOrganism(organism, index)));\n  }\n\n}\n\nexport default OrganismList;","map":{"version":3,"sources":["/home/alistair/practice/react/typescript-test/src/components/organismConfig/OrganismList.tsx"],"names":["React","FuncOrganism","OrganismList","Component","constructor","props","state","organisms","selectedOrganism","render","console","log","map","organism","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAmBC,YAAnB,QAAuC,YAAvC;;AAQA,MAAMC,YAAN,SAA2BF,KAAK,CAACG,SAAjC,CAAmE;AAC/DC,EAAAA,WAAW,CAACC,KAAD,EAA2B;AAClC,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,EADF;AAETC,MAAAA,gBAAgB,EAAE;AAFT,KAAb;AAIH;;AACDC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKL,KAAL,CAAWC,SAAX,CAAqBK,GAArB,CAAyB,CAACC,QAAD,EAAkBC,KAAlB,KACrB;AACAb,IAAAA,YAAY,CAACY,QAAD,EAAWC,KAAX,CAFhB,CAFJ,CADJ;AAYH;;AAtB8D;;AAyBnE,eAAeZ,YAAf","sourcesContent":["import React from 'react';\nimport Organism, { FuncOrganism } from './Organism';\nimport { string } from 'prop-types';\n\ntype OrganismListProps = {\n    organisms: Array<string>,\n    selectedOrganism: string | null,\n}\n\nclass OrganismList extends React.Component<any, OrganismListProps> {\n    constructor(props: OrganismListProps) {\n        super(props);\n        this.state = {\n            organisms: [],\n            selectedOrganism: null,\n        }\n    }\n    render() {\n        console.log('@@@ @ @ orglist render')\n        return (\n            <div>\n                {\n                this.state.organisms.map((organism:string, index:number) => (\n                    // <Organism key={index} organismName={organism} isSelected={false} />\n                    FuncOrganism(organism, index)\n                    )\n                )\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default OrganismList;"]},"metadata":{},"sourceType":"module"}